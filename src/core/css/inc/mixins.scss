@import "./vars";
@import "~amo/css/inc/vars";
@import "~photon-colors/colors";

/* Font mixins. Changes here affect *all* apps */
@mixin font-light() {
  font-family: "Fira Sans", sans-serif;
  font-style: normal;
  font-weight: 300;
}

@mixin font-light-italic() {
  font-family: "Fira Sans", sans-serif;
  font-style: normal;
  font-weight: 300;
}

@mixin font-regular() {
  font-family: "Fira Sans", sans-serif;
  font-style: normal;
  font-weight: 400;
}

@mixin font-regular-italic() {
  font-family: "Fira Sans", sans-serif;
  font-style: italic;
  font-weight: 400;
}

@mixin font-medium() {
  font-family: "Fira Sans", sans-serif;
  font-style: normal;
  font-weight: 500;
}

@mixin font-medium-italic() {
  font-family: "Fira Sans", sans-serif;
  font-style: italic;
  font-weight: 500;
}

@mixin font-bold() {
  font-family: "Fira Sans", sans-serif;
  font-style: normal;
  font-weight: 600;
}

@mixin font-bold-italic() {
  font-family: "Fira Sans", sans-serif;
  font-style: italic;
  font-weight: 600;
}

@mixin font-opensans-regular() {
  font-family: "Open Sans", sans-serif;
  font-style: normal;
  font-weight: 400;
}

@mixin font-opensans-regular-italic() {
  font-family: "Open Sans", sans-serif;
  font-style: italic;
  font-weight: 400;
}

@mixin font-opensans-bold() {
  font-family: "Open Sans", sans-serif;
  font-style: normal;
  font-weight: 700;
}

@mixin font-opensans-bold-italic() {
  font-family: "Open Sans", sans-serif;
  font-style: italic;
  font-weight: 700;
}

/* Shared mixins. Bear in mind changes here impact *all* apps. */

@mixin focus() {
  border-color: $focus-outline-color;
  box-shadow: 0 0 5px 0 $focus-outline-color;
  outline: none;
}

@mixin disabled($background) {
  @if lightness($background) > 80 {
    background: adjust-hue(darken(desaturate($background, 85%), 13%), 6);
  }

  @else {
    background: adjust-hue(lighten(desaturate($background, 85%), 13%), 6);
  }

  cursor: not-allowed;
}

@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media #{map-get($breakpoints, $breakpoint)} {
      @content;
    }
  } @else {
    @warn "Breakpoint `#{$breakpoint}` not found in `$breakpoints` map.";
  }
}

/* Arrows */
$default-arrow-margin: 3px;

@mixin arrow($margin: $default-arrow-margin) {
  background: url("~amo/img/icons/arrow-link-color.svg") 50% 50% no-repeat;
  border-radius: $border-radius-m;
  content: "";
  display: inline-block;
  height: 16px;
  margin-right: -$margin * 2;
  position: relative;
  right: -$margin;
  top: 4px;
  width: 22px;

  [dir=rtl] & {
    left: -$margin;
    margin-left: -$margin * 2;
    margin-right: 0;
    right: auto;
    transform: rotate(180deg);
  }
}

@mixin arrow-down($margin: $default-arrow-margin) {
  @include arrow($margin);

  transform: rotate(90deg);

  [dir=rtl] & {
    transform: rotate(270deg);
  }
}

// This alias to arrow (which is the same as arrow-next) makes it easier to
// differentiate two arrows when both arrow-next and arrow-previous are used
// near each other.
@mixin arrow-next($margin: $default-arrow-margin) {
  @include arrow($margin);
}

@mixin arrow-previous($margin: $default-arrow-margin) {
  @include arrow($margin);

  left: -$margin;
  margin-left: -$margin * 2;
  margin-right: 0;
  right: auto;
  transform: rotate(180deg);

  [dir=rtl] & {
    left: auto;
    margin-left: 0;
    margin-right: -$margin * 2;
    right: -$margin;
    transform: none;
  }
}

@mixin arrow-up($margin: $default-arrow-margin) {
  @include arrow($margin);

  transform: rotate(270deg);

  [dir=rtl] & {
    transform: rotate(90deg);
  }
}

@mixin arrow-link-right-aligned() {
  background-image: url("~amo/img/icons/arrow-link-color.svg");
  margin-right: 0;
  position: absolute;
  right: 8px;
  top: 14px;

  [dir=rtl] & {
    left: 8px;
    right: auto;
  }
}

@mixin text-align-start() {
  text-align: left;

  [dir=rtl] & {
    text-align: right;
  }
}

@mixin text-align-end() {
  text-align: right;

  [dir=rtl] & {
    text-align: left;
  }
}

@mixin start($pos) {
  left: $pos;
  right: auto;

  [dir=rtl] & {
    left: auto;
    right: $pos;
  }
}

@mixin end($pos) {
  left: auto;
  right: $pos;

  [dir=rtl] & {
    left: $pos;
    right: auto;
  }
}

@mixin margin($top, $end, $bottom, $start) {
  margin: $top $end $bottom $start;

  [dir=rtl] & {
    margin: $top $start $bottom $end;
  }
}

@mixin margin-start($val) {
  [dir=ltr] & {
    margin-left: $val;
  }

  [dir=rtl] & {
    margin-right: $val;
  }
}

@mixin margin-end($val) {
  [dir=ltr] & {
    margin-right: $val;
  }

  [dir=rtl] & {
    margin-left: $val;
  }
}

@mixin padding-start($val) {
  [dir=ltr] & {
    padding-left: $val;
  }

  [dir=rtl] & {
    padding-right: $val;
  }
}

@mixin padding-end($val) {
  [dir=ltr] & {
    padding-right: $val;
  }

  [dir=rtl] & {
    padding-left: $val;
  }
}

@mixin addonSection() {
  background: $base-color;
  overflow: hidden;
  padding: 10px 20px;

  @include respond-to(large) {
    padding: 15px 36px;
  }
}
